//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ninject.SpecFlowPlugin.Properties {
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Ninject.SpecFlowPlugin.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{0}] Missing single argument that should have type {1}.
        /// </summary>
        internal static string MissingContainerConfiguratorArgument {
            get {
                return ResourceManager.GetString("MissingContainerConfiguratorArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find scenario dependencies! Mark a static method that returns a ContainerBuilder with [ScenarioDependencies]!.
        /// </summary>
        internal static string ScenarioDependenciesNotFound {
            get {
                return ResourceManager.GetString("ScenarioDependenciesNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following bindings contain an AfterScenario hook with too high priority: {0}. This is a problem because they will be called after the SpecFlowPlugin&apos;s hook disposing all the disposable objects. In that case, you may mistakenly try in SpecFlow hooks to access objects that have already been disposed..
        /// </summary>
        internal static string TooHighOrderInAfterHook {
            get {
                return ResourceManager.GetString("TooHighOrderInAfterHook", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{0}] The method has {1} arguments instead of the expected {2}..
        /// </summary>
        internal static string WrongAmountOfArgsToContainerConfigurator {
            get {
                return ResourceManager.GetString("WrongAmountOfArgsToContainerConfigurator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{0}] Argument has type {1} instead of expected {2}.
        /// </summary>
        internal static string WrongContainerConfiguratorArgument {
            get {
                return ResourceManager.GetString("WrongContainerConfiguratorArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{0}] Return type is {1} instead of void..
        /// </summary>
        internal static string WrongContainerConfiguratorReturnType {
            get {
                return ResourceManager.GetString("WrongContainerConfiguratorReturnType", resourceCulture);
            }
        }
    }
}
